from lark import Lark, Transformer, v_args

grammar = """
start: expr

?expr: expr "+" term   -> add
     | term

?term: term "*" factor -> mul
     | factor

?factor: NUMBER        -> number

%import common.NUMBER
%import common.WS_INLINE
%ignore WS_INLINE
"""
# Transformer con @v_args para desempaquetar
@v_args(inline=True)
class CalcTransformer(Transformer):
    def number(self, n): return int(n)
    def add(self, a, b): return a + b
    def mul(self, a, b): return a * b
    def start(self, expr): return expr

# Crear el parser y aplicar la transformación
parser = Lark(grammar, parser="lalr", transformer=CalcTransformer())

# Ejecutar análisis y mostrar resultado
print(parser.parse("2 + 3 * 4"))  # Resultado: 14
